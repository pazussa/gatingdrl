import logging


# ‚úÖ A√±adir funci√≥n metadata personalizada al m√≥dulo logging
if not hasattr(logging, 'metadata'):
    def metadata(msg, *args, **kwargs):
        """Funci√≥n personalizada para logging de metadatos con formato especial"""
        logging.info(f"[METADATA] {msg}", *args, **kwargs)
    
    # A√±adir la funci√≥n al m√≥dulo logging
    logging.metadata = metadata


# 1. ‚úÖ Configura el event_recorder de matplotlib.font_manager ANTES de importar matplotlib
logging.getLogger('matplotlib.font_manager').setLevel(logging.WARNING)
logging.getLogger('matplotlib.pyplot').setLevel(logging.WARNING)
logging.getLogger('matplotlib').setLevel(logging.WARNING)

# 2. ‚úÖ Configura la fuente por defecto
import matplotlib.pyplot as plt
plt.rcParams['font.family'] = 'sans-serif'
plt.rcParams['font.sans-serif'] = ['DejaVu Sans']  # Aseg√∫rate de que esta fuente est√© instalada
# Eliminar el par√°metro inv√°lido font.cache_size
# Verificar si el par√°metro get_no_warn es v√°lido
try:
    plt.rcParams['font.get_no_warn'] = True
except KeyError:
    # Ignorar si este par√°metro tampoco es v√°lido
    pass


# 3. Funci√≥n para configurar el logging general
def log_config(filename, level=logging.DEBUG):
    # Configuraci√≥n b√°sica del event_recorder ra√≠z
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(filename, mode='w'),
            logging.StreamHandler()
        ]
    )
    # 4. üö® Evita que matplotlib.font_manager herede el nivel DEBUG
    logging.getLogger('matplotlib').setLevel(logging.WARNING)
    logging.getLogger('matplotlib.font_manager').setLevel(logging.WARNING)
    logging.getLogger('matplotlib.pyplot').setLevel(logging.WARNING)
    logging.getLogger('PIL').setLevel(logging.WARNING)
    